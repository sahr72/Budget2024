@* @page "/Budget"
@using Budget2024.Application.DTOs.Budget


@inject HttpClient Http

<h3>Budget Data</h3>

@if (budgets == null)
{
    <p>Loading...</p>
}
else
{
    <ul>
        @foreach (var budget in budgets)
        {
            <li>@budget.Code - @budget.Budget1</li>
        }
    </ul>
}

@code {
    private List<BudgetDTO> budgets;

    protected override async Task OnInitializedAsync()
    {
        budgets = await Http.GetFromJsonAsync<List<BudgetDTO>>("api/budget");
    }
} *@
@page "/Budget"
@using Budget2024.Application.DTOs.Budget
@using Budget2024.Application.Services.Budget



<h3>Budget Management</h3>

<!-- Toolbar for Add/Update Buttons -->
<div class="mb-2">
    <button @onclick="ShowAddForm" disabled="@isFormVisible">Add Budget</button>
    @* <button @onclick="ShowUpdateForm" disabled="@isFormVisible || selectedBudget == null">Update Budget</button> *@
    <button @onclick="ShowUpdateForm" disabled="@isUpdateDisabled">Update Budget</button>
</div>

<!-- Budget Grid Component -->
<BudgetGridComponent 
Budgets="@budgets" 
OnRowSelected="HandleRowSelected" />

<!-- Budget Form Component -->
@if (isFormVisible)
{
    <BudgetFormComponent 
    Budget="selectedBudget" 
    OnSave="HandleSave" 
    OnCancel="HandleCancel" />
}

@code {
    private List<BudgetDTO> budgets = new();

    private BudgetDTO? selectedBudget; // Selected row data
    private bool isFormVisible = false;
    // Computed property to control the disabled state of the Update button
    private bool isUpdateDisabled => isFormVisible || selectedBudget == null || !budgets.Any();

    protected override async Task OnInitializedAsync()
    {
        await LoadBudgets();

    }

    private async Task LoadBudgets()
    {
        // Fetch budgets from API
        budgets = await Http.GetFromJsonAsync<List<BudgetDTO>>("https://localhost:7076/api/Budget/all") ?? new List<BudgetDTO>();
        StateHasChanged(); // Ensure the UI updates after loading data
                   /*
                   var filters = new Dictionary<string, string>
                {
                { "Budget1", "التسيير" } // Filtering by Name field
                    // ,{ "Category", "Health" } // Filtering by Category field
                    };

                    var sortOrder = new Dictionary<string, string>
                    {
                    { "Budget1", "asc" }, // Sorting by Budget1 field in ascending order
                { "Code", "desc" } // Sorting by code field in descending order
                };

                var pageNumber = 1;
                var pageSize = 10;

                // Build the query string
                var queryString = QueryStringHelper.BuildQueryString(filters, sortOrder, pageNumber, pageSize);

                // Call the API with the query string
                //exp: https://localhost:7076/api/budget/filtered?filters[Code]=م.ت&sortOrder[Budget1]=asc&sortOrder[Code]=desc&pageNumber=1&pageSize=10
                var url = $"https://localhost:7076/api/Budget/filtered{queryString}";
                budgets = await Http.GetFromJsonAsync<List<BudgetDTO>>(url);// ?? new List<BudgetDTO>();
        */

        //budgets=await budget
    }

    private void ShowAddForm()
    {
        selectedBudget = new BudgetDTO(); // Empty for Add
       
        isFormVisible = true;
    }

    private void ShowUpdateForm()
    {
        isFormVisible = true;
    }

    private async Task HandleSave(BudgetDTO budget)
    {
        if (budget.BudgetId == 0)
        {
            // Add Budget
            await Http.PostAsJsonAsync("https://localhost:7076/api/budget", budget);
        }
        else
        {
            // Update Budget
            await Http.PutAsJsonAsync($"https://localhost:7076/api/budget/{budget.BudgetId}", budget);
        }

        await LoadBudgets(); // Refresh Grid
        isFormVisible = false;
        selectedBudget = null;// Reset selectedBudget after save
    }

    private void HandleCancel()
    {
        isFormVisible = false;
        selectedBudget = null;// Reset selectedBudget when cancel is clicked
    }

    private void HandleRowSelected(BudgetDTO budget)
    {
       if (selectedBudget.BudgetId!= 0) {
           selectedBudget = budget;
        StateHasChanged(); // Trigger UI re-render to enable the button
       }
    }
}
