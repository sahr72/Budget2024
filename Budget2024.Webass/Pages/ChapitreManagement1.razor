@page "/ChapitresManagement1"
@using Budget2024.Application.DTOs.Budget
@using Budget2024.Application.Services
@using Budget2024.Application.Services.Chapitre
@using System.Reflection.Metadata
@* @inject IChapitreService ChapitreService
@inject IBudgetService BudgetService *@
@inject IJSRuntime JSRuntime

<PageTitle>Chapitre Management</PageTitle>

<h1>Chapitre Management</h1>

<div>
    @if (Budgets != null && Budgets.Any())
    {
        @* <div class="mb-3">
            <label for="budgetSelect" class="form-label">Select Budget</label>
            <select id="budgetSelect" class="form-select" @onchange="OnSelectedBudgetChanged">
                <option value="">-- Select a Budget --</option>
                @foreach (var budget in Budgets)
                {
                    <option value="@budget.BudgetId">@budget.Budget1</option>
                }
            </select>
        </div> *@
        @* <div class="mb-3 d-flex align-items-center">
            <label for="budgetSelect" class="form-label me-2">Select Budget</label>
            <select id="budgetSelect" class="form-select" @onchange="OnSelectedBudgetChanged">
                <option value="">-- Select a Budget --</option>
                @foreach (var budget in Budgets)
                {
                    <option value="@budget.BudgetId">@budget.Budget1</option>
                }
            </select>
        </div> *@
        <div class="mb-3 row">
            <label for="budgetSelect" class="col-form-label col-sm-2 fw-bold">Select Budget</label>
            <div class="col-sm-10">
                <select id="budgetSelect" class="form-select" @onchange="OnSelectedBudgetChanged">
                    <option value="">-- Select a Budget --</option>
                    @foreach (var budget in Budgets)
                    {
                        <option value="@budget.BudgetId">@budget.Budget1</option>
                    }
                </select>
            </div>
        </div>
    }
    else
    {
        <p>No budgets available.</p>
    }
</div>

<button class="btn btn-success btn-sm rounded-pill" @onclick="ShowAddModal" style="margin-top: 20px;" title="Ajouter"> <i class="bi bi-plus"></i></button>

<table class="table table-striped" border="1" style="width: 100%; margin-top: 20px;">
    <thead class="table-dark">
        <tr>
            <th>Code Chapitre</th>
            <th>Chapitre</th>
            @* <th>Budget Description</th> *@
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (Chapitres != null && Chapitres.Any())
        {
            @foreach (var chapitre in Chapitres)
            {
                <tr>
                    <!-- Hidden field to hold ChapitreId -->
                    <td style="display: none;">
                        <input type="hidden" value="@chapitre.ChapitreId" id="ChapitreId_@chapitre.ChapitreId" />
                    </td>
                    <td>@chapitre.CodeChap</td>
                    <td>@chapitre.Chapitre1</td>
                    @* <td>@chapitre.BudgetDescription</td> *@
                    <td>
                        <button class="btn btn-warning btn-sm rounded-circle" data-bs-toggle="tooltip" data-bs-placement="top" @onclick="() => ShowEditModal(chapitre)" title="Modifier"><i class="bi bi-pencil" ></i></button>
                        <button class="btn btn-danger btn-sm rounded-circle" data-bs-toggle="tooltip" data-bs-placement="top" @onclick="() => DeleteChapitre(chapitre)"><i class="bi bi-trash" title="Supprimer"></i></button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="4">Aucune données à afficher.</td>
            </tr>
        }
    </tbody>
</table>

@* <button class="btn btn-success btn-sm rounded-pill" @onclick="ShowAddModal" style="margin-top: 20px;" title="Ajouter"> <i class="bi bi-plus"></i></button> *@

<!-- Modal Dialog -->
@* <div id="modal" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
    background-color: white; padding: 20px; border: 1px solid black; z-index: 1001; width: 300px;">
    <h3>@(IsEditing ? "Edit Chapitre" : "Add Chapitre")</h3>
    <form>
        <label>Code:</label><br />
        <input type="text" @bind="CurrentChapitre.CodeChap" /><br /><br />
        <label>Chapitre:</label><br />
        <input type="text" @bind="CurrentChapitre.Chapitre1" /><br /><br />
        <button type="button" @onclick="SaveChapitre">Save</button>
        <button type="button" @onclick="CloseModal">Cancel</button>
    </form>
</div> *@
<!-- Modal Dialog -->
@* <div id="modal"  tabindex="-1" role="dialog" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
    background-color: white; padding: 20px; border: 1px solid black; z-index: 1001; width: 300px;">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(IsEditing ? "Edit Chapitre" : "Add Chapitre")</h5>
                <button type="button" class="close" aria-label="Close" @onclick="CloseModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="codeChap">Code:</label>
                        <input type="text" class="form-control" id="codeChap" @bind="CurrentChapitre.CodeChap" />
                    </div>
                    <div class="form-group">
                        <label for="chapitre1">Chapitre:</label>
                        <input type="text" class="form-control" id="chapitre1" @bind="CurrentChapitre.Chapitre1" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="SaveChapitre">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
            </div>
        </div>
    </div>
</div> *@


<div id="modal" tabindex="-1" role="dialog" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
    background-color: white; padding: 20px; border: 1px solid black; z-index: 1001; width: 300px;">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">@(IsEditing ? "Edit Chapitre" : "Add Chapitre")</h5>
                <button type="button" class="close" aria-label="Close" @onclick="CloseModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="CurrentChapitre" OnValidSubmit="SaveChapitre">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="codeChap">Code:</label>
                        <InputText id="codeChap" class="form-control" @bind-Value="CurrentChapitre.CodeChap" />
                        <ValidationMessage For="@(() => CurrentChapitre.CodeChap)" />
                    </div>
                    <div class="form-group">
                        <label for="chapitre1">Chapitre:</label>
                        <InputText id="chapitre1" class="form-control" @bind-Value="CurrentChapitre.Chapitre1" />
                        <ValidationMessage For="@(() => CurrentChapitre.Chapitre1)" />
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!-- Overlay -->
@* <div id="overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%;
    background-color: rgba(0, 0, 0, 0.5); z-index: 1000;" @onclick="CloseModal"></div> *@
<div id="overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%;
    background-color: rgba(0, 0, 0, 0.5); z-index: 1000;"></div>

<ConfirmDialog @ref="ConfirmDialogRef"
Title="Delete Chapitre Confirmation"
ConfirmClicked="ConfirmDeleteChapitre"
CancelClicked="CancelDeleteChapitre">
</ConfirmDialog>

@code {
    private List<BudgetDTO> Budgets = new();
    private List<ChapitreDTO> Chapitres = new();
    private BudgetDTO? SelectedBudget { get; set; }
    private ChapitreDTO CurrentChapitre { get; set; } = new ChapitreDTO();
    private bool IsEditing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadBudgets();
    }

    private async Task LoadBudgets()
    {
        //Budgets = await BudgetService.GetAllAsync();
        Budgets = await Http.GetFromJsonAsync<List<BudgetDTO>>("https://localhost:7076/api/Budget/all");
    }

    private async Task OnSelectedBudgetChanged(ChangeEventArgs e)
    {
        var selectedId = e.Value?.ToString();
        SelectedBudget = Budgets.FirstOrDefault(b => b.BudgetId.ToString() == selectedId);
        if (SelectedBudget != null)
        {
            await LoadChapitresByBudget(SelectedBudget);
        }
        else
        {
            Chapitres.Clear();
        }
    }

    private async Task LoadChapitresByBudget(BudgetDTO budget)
    {
        string url = $"https://localhost:7076/api/Chapitre/by-budget/{budget.BudgetId}";
        Chapitres = await Http.GetFromJsonAsync<List<ChapitreDTO>>(url);
    }

    private async Task ShowAddModal()
    {
        IsEditing = false;
        CurrentChapitre = new ChapitreDTO { BudgetId = SelectedBudget?.BudgetId ?? 0 };
        await ShowModal();
    }

    private async Task ShowEditModal(ChapitreDTO chapitre)
    {
        IsEditing = true;
        CurrentChapitre = new ChapitreDTO
            {
                ChapitreId = chapitre.ChapitreId,
                CodeChap = chapitre.CodeChap,
                Chapitre1 = chapitre.Chapitre1,
                BudgetId = chapitre.BudgetId
            };
        await ShowModal();
    }

    private async Task ShowModal()
    {
        await JSRuntime.InvokeVoidAsync("modalFunctions.showModal", "modal", "overlay");
    }

    private async Task CloseModal()
    {
        await JSRuntime.InvokeVoidAsync("modalFunctions.closeModal", "modal", "overlay");
    }
        /*
        private async Task SaveChapitre()
        {
        // Validate ChapitreDTO fields(CodeChap, Chapitre1, BudgetId) are populated and valid.
        //     Ensure BudgetDescription is excluded from the payload during creation.
        //     Test API behavior using Postman with a minimal valid payload.
        //     Log and inspect the payload and ModelState errors in the Create endpoint.
        //     Confirm that ChapitreMappingProfile correctly maps ChapitreDTO to Chapitre.

            HttpResponseMessage? response;

            if (IsEditing)
            {
            var index = Chapitres.FindIndex(c => c.ChapitreId == CurrentChapitre.ChapitreId);
                if (index >= 0)
                {

                response = await Http.PutAsJsonAsync($"https://localhost:7076/api/chapitre/update/{CurrentChapitre?.ChapitreId}", CurrentChapitre);
                     if (response.IsSuccessStatusCode)
                    {
                    Chapitres[index] = CurrentChapitre;
                //NewBudget = new BudgetDTO(); // Reset form
                    }
                    else
                    {
                    var error = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"API Error: {response.StatusCode} - {error}"); // Handle failure
            }
            }
            }
            else
            {
            //Chapitres.Add(CurrentChapitre);
            response = await Http.PostAsJsonAsync("https://localhost:7076/api/chapitre/create", CurrentChapitre);
            if (response.IsSuccessStatusCode)
                {
                Chapitres.Add(CurrentChapitre);
                CurrentChapitre = new ChapitreDTO(); // Reset form
            }
                else
                {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"API Error: {response.StatusCode} - {error}"); // Handle failure
        }
        }

        await CloseModal();
    }
        */

    private async Task SaveChapitre()
    {
        HttpResponseMessage response;

        if (IsEditing)
        {
            // Update existing Chapitre
            response = await Http.PutAsJsonAsync($"https://localhost:7076/api/chapitre/update/{CurrentChapitre?.ChapitreId}", CurrentChapitre);
        }
        else
        {
            // Create new Chapitre
            response = await Http.PostAsJsonAsync("https://localhost:7076/api/chapitre/create", CurrentChapitre);
        }

        if (response.IsSuccessStatusCode)
        {
            var updatedChapitre = await response.Content.ReadFromJsonAsync<ChapitreDTO>();

            if (updatedChapitre != null)
            {
                if (IsEditing)
                {
                    // Replace the existing Chapitre in the list
                    var index = Chapitres.FindIndex(c => c.ChapitreId == updatedChapitre.ChapitreId);
                    if (index >= 0)
                    {
                        Chapitres[index] = updatedChapitre;
                    }
                }
                else
                {
                    // Add the new Chapitre to the list
                    Chapitres.Add(updatedChapitre);
                }
            }

            await CloseModal();
        }
        else
        {
            // Handle error response
            var errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error: {errorMessage}");
            // Optionally, display the error message to the user
        }
    }




    // private async Task DeleteChapitre(ChapitreDTO chapitre)
    // {
    //     if (await ConfirmDeleteAsync(chapitre))
    //     {
    //         Chapitres.Remove(chapitre);
    //     }
    // }

    // private Task<bool> ConfirmDeleteAsync(ChapitreDTO chapitre)
    // {
    //     return Task.FromResult(true); // Replace with actual confirmation logic
    // }

    //2025-02-03
    private async Task DeleteChapitre(ChapitreDTO chapitre)
    {
        ChapitreIdToDelete = chapitre.ChapitreId;
        var chapitreToDelete = Chapitres.FirstOrDefault(b => b.ChapitreId == chapitre.ChapitreId);
        if (chapitreToDelete != null)
        {
            ConfirmDialogRef.Message = $"Are you sure you want to delete Chapitre {chapitreToDelete.CodeChap} (Chap: {chapitre.Chapitre1})?";
        }
        else
        {
            ConfirmDialogRef.Message = $"Are you sure you want to delete Chapitre with code {chapitre.CodeChap}?";
        }
        await ConfirmDialogRef.Show();
    }

    private ConfirmDialog? ConfirmDialogRef;
    private int ChapitreIdToDelete { get; set; }

    private async Task ConfirmDeleteChapitre()
    {
        // Perform the deletion
        if (ChapitreIdToDelete > 0)
        {
            // Actual deletion logic after confirmation
            var response = await Http.DeleteAsync($"https://localhost:7076/api/Chapitre/delete/{ChapitreIdToDelete}");

            if (response.IsSuccessStatusCode)
            {
                // Remove the Chapitre from the list
                var chapitreToDelete = Chapitres.FirstOrDefault(b => b.ChapitreId == ChapitreIdToDelete);
                Chapitres.Remove(chapitreToDelete);
               //// await LoadChapitresByBudget(SelectedBudget);
                Console.WriteLine("Chapitre deleted successfully.");
            }
            else
            {
                //Handle error
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {errorMessage}");
                //Console.WriteLine("Failed to delete budget.");
            }
            // Reset the ChapitreToDelete
            ChapitreIdToDelete = 0;
       }
    }

    private void CancelDeleteChapitre()
    {
        ChapitreIdToDelete = 0; // Reset
        Console.WriteLine("Deletion cancelled.");
    }
}
