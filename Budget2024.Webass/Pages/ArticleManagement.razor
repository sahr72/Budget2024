@page "/ArticleManagement"
@using Budget2024.Application.DTOs.Budget
@using Budget2024.Application.Services
@using Budget2024.Application.Services.Chapitre
@using System.Reflection.Metadata
@* @inject IChapitreService ChapitreService
@inject IBudgetService BudgetService *@
@inject IJSRuntime JSRuntime

<PageTitle>Article Management</PageTitle>

<h1>Article Management</h1>

<div>
    @if (Budgets != null && Budgets.Any())
    {
        @* <div class="mb-3">
            <label for="budgetSelect" class="form-label">Select Budget</label>
            <select id="budgetSelect" class="form-select" @onchange="OnSelectedBudgetChanged">
                <option value="">-- Select a Budget --</option>
                @foreach (var budget in Budgets)
                {
                    <option value="@budget.BudgetId">@budget.Budget1</option>
                }
            </select>
        </div> *@
        @* <div class="mb-3 d-flex align-items-center">
            <label for="budgetSelect" class="form-label me-2">Select Budget</label>
            <select id="budgetSelect" class="form-select" @onchange="OnSelectedBudgetChanged">
                <option value="">-- Select a Budget --</option>
                @foreach (var budget in Budgets)
                {
                    <option value="@budget.BudgetId">@budget.Budget1</option>
                }
            </select>
        </div> *@
        <div class="mb-3 row">
            <label for="budgetSelect" class="col-form-label col-sm-2 fw-bold">Select Budget</label>
            <div class="col-sm-10">
                <select id="budgetSelect" class="form-select" @onchange="OnSelectedBudgetChanged">
                    <option value="">-- Select a Budget --</option>
                    @foreach (var budget in Budgets)
                    {
                        <option value="@budget.BudgetId">@budget.Budget1</option>
                    }
                </select>
            </div>
        </div>
        @if (ChapitresByBudget != null && ChapitresByBudget.Any())
        {
            <div class="mb-3 row">
                <label for="chapitreSelect" class="col-form-label col-sm-2 fw-bold">Select chapitre</label>
                <div class="col-sm-10">
                    <select id="chapitreSelect" class="form-select" @onchange="OnSelectedChapitreChanged">
                        <option value="">-- Select a chapitre --</option>
                        @foreach (var chapitre in ChapitresByBudget)
                        {
                            <option value="@chapitre.ChapitreId">@chapitre.Chapitre1</option>
                        }
                    </select>
                </div>
            </div>
        }
    }
    else
    {
        <p>No budgets available.</p>
    }
</div>

<button class="btn btn-success btn-sm rounded-pill" @onclick="ShowAddModal" style="margin-top: 20px;" title="Ajouter"> <i class="bi bi-plus"></i></button>

@* <table class="table table-striped" border="1" style="width: 100%; margin-top: 20px;">
    <thead class="table-dark">
        <tr>
            <th>Code Article</th>
            <th>Article</th>
            @* <th>Budget Description</th> 
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (ArticlesByChapitre != null && ArticlesByChapitre.Any())
        {
            @foreach (var article in ArticlesByChapitre)
            {
                <tr>
                    <!-- Hidden field to hold ChapitreId -->
                    <td style="display: none;">
                        <input type="hidden" value="@article.ChapitreId" id="ChapitreId_@article.ChapitreId" />
                    </td>
                    <td>@article.CodeArt</td>
                    <td>@article.Article1</td>

                    <td>
                        <button class="btn btn-warning btn-sm rounded-circle" data-bs-toggle="tooltip" data-bs-placement="top" @onclick="() => ShowEditModal(article)" title="Modifier"><i class="bi bi-pencil"></i></button>
                        <button class="btn btn-danger btn-sm rounded-circle" data-bs-toggle="tooltip" data-bs-placement="top" @onclick="() => DeleteArticle(article)"><i class="bi bi-trash" title="Supprimer"></i></button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="4">Aucune données à afficher.</td>
            </tr>
        }
    </tbody>
</table> *@
<div style="max-height: 600px; overflow-y: auto; margin-top: 20px;">
    <table class="table table-striped" border="1" style="width: 100%;">
        <thead class="table-dark" style="position: sticky; top: 0; z-index: 1;">
            <tr>
                <th>Code Article</th>
                <th>Article</th>
                @* <th>Budget Description</th> *@
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @* @if (ArticlesByChapitre != null && ArticlesByChapitre.Any()) *@
            @if (GetPaginatedData() != null && GetPaginatedData().Any())
            {
                @foreach (var article in GetPaginatedData())
                {
                    <tr>
                        <!-- Hidden field to hold ChapitreId -->
                        <td style="display: none;">
                            <input type="hidden" value="@article.ChapitreId" id="ChapitreId_@article.ChapitreId" />
                        </td>
                        <td>@article.CodeArt</td>
                        <td>@article.Article1</td>
                        @* <td>@chapitre.BudgetDescription</td> *@
                        <td>
                            <button class="btn btn-warning btn-sm rounded-circle" data-bs-toggle="tooltip" data-bs-placement="top" @onclick="() => ShowEditModal(article)" title="Modifier"><i class="bi bi-pencil"></i></button>
                            <button class="btn btn-danger btn-sm rounded-circle" data-bs-toggle="tooltip" data-bs-placement="top" @onclick="() => DeleteArticle(article)"><i class="bi bi-trash" title="Supprimer"></i></button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4">Aucune données à afficher.</td>
                </tr>
            }
        </tbody>
    </table>
</div>
<!-- Pagination Controls -->
<nav aria-label="Page navigation">
    <ul class="pagination">
        <!-- Previous Button -->
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <button class="page-link" @onclick="() => GoToPage(CurrentPage - 1)">Précédent</button>
        </li>

        <!-- Page Numbers -->
        @* @for (int i = 1; i <= TotalPages; i++)
        {
            <li class="page-item @(i == CurrentPage ? "active" : "")">
                <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
            </li>
        } *@
        <!-- Page Numbers -->
        @for (int i = 1; i <= TotalPages; i++)
        {
            int pageNumber = i;  // Capturer `i` dans une variable locale
            <li class="page-item @(pageNumber == CurrentPage ? "active" : "")">
                <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
            </li>
        }

        <!-- Next Button -->
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <button class="page-link" @onclick="() => GoToPage(CurrentPage + 1)">Suivant</button>
        </li>
    </ul>
</nav>
@* <button class="btn btn-success btn-sm rounded-pill" @onclick="ShowAddModal" style="margin-top: 20px;" title="Ajouter"> <i class="bi bi-plus"></i></button> *@

<!-- Modal Dialog -->
@* <div id="modal" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
    background-color: white; padding: 20px; border: 1px solid black; z-index: 1001; width: 300px;">
    <h3>@(IsEditing ? "Edit Chapitre" : "Add Chapitre")</h3>
    <form>
        <label>Code:</label><br />
        <input type="text" @bind="CurrentChapitre.CodeChap" /><br /><br />
        <label>Chapitre:</label><br />
        <input type="text" @bind="CurrentChapitre.Chapitre1" /><br /><br />
        <button type="button" @onclick="SaveChapitre">Save</button>
        <button type="button" @onclick="CloseModal">Cancel</button>
    </form>
</div> *@
<!-- Modal Dialog -->
@* <div id="modal"  tabindex="-1" role="dialog" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
    background-color: white; padding: 20px; border: 1px solid black; z-index: 1001; width: 300px;">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(IsEditing ? "Edit Chapitre" : "Add Chapitre")</h5>
                <button type="button" class="close" aria-label="Close" @onclick="CloseModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="codeChap">Code:</label>
                        <input type="text" class="form-control" id="codeChap" @bind="CurrentChapitre.CodeChap" />
                    </div>
                    <div class="form-group">
                        <label for="chapitre1">Chapitre:</label>
                        <input type="text" class="form-control" id="chapitre1" @bind="CurrentChapitre.Chapitre1" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="SaveChapitre">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
            </div>
        </div>
    </div>
</div> *@


<div id="modal" tabindex="-1" role="dialog" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
    background-color: white; padding: 20px; border: 1px solid black; z-index: 1001; width: 300px;">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">@(IsEditing ? "Edit Article" : "Add Article")</h5>
                <button type="button" class="close" aria-label="Close" @onclick="CloseModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="CurrentArticle" OnValidSubmit="SaveArticle">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="codeArt">Code:</label>
                        <InputText id="codeArt" class="form-control" @bind-Value="CurrentArticle.CodeArt" />
                        <ValidationMessage For="@(() => CurrentArticle.Article1)" />
                    </div>
                    <div class="form-group">
                        <label for="chapitre1">Chapitre:</label>
                        <InputText id="chapitre1" class="form-control" @bind-Value="CurrentArticle.Article1" />
                        <ValidationMessage For="@(() => CurrentArticle.Article1)" />
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!-- Overlay -->
@* <div id="overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%;
    background-color: rgba(0, 0, 0, 0.5); z-index: 1000;" @onclick="CloseModal"></div> *@
<div id="overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%;
    background-color: rgba(0, 0, 0, 0.5); z-index: 1000;"></div>

<ConfirmDialog @ref="ConfirmDialogRef"
Title="Delete Article Confirmation"
ConfirmClicked="ConfirmDeleteArticle"
CancelClicked="CancelDeleteCArticle">
</ConfirmDialog>

@code {
    private List<BudgetDTO> Budgets = new();
    private List<ChapitreDTO> ChapitresByBudget = new();
    private List<ArticleDTO> ArticlesByChapitre = new();
    private BudgetDTO? SelectedBudget { get; set; }
    private ChapitreDTO? SelectedChapitre { get; set; }
    private ArticleDTO CurrentArticle { get; set; } = new ArticleDTO();
    private bool IsEditing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadBudgets();
        GetPaginatedData();
    }

    private async Task LoadBudgets()
    {
        //Budgets = await BudgetService.GetAllAsync();
        Budgets = await Http.GetFromJsonAsync<List<BudgetDTO>>("https://localhost:7076/api/Budget/all");
    }

    // private async Task OnSelectedBudgetChanged(ChangeEventArgs e)
    // {
    //     var selectedId = e.Value?.ToString();
    //     SelectedBudget = Budgets.FirstOrDefault(b => b.BudgetId.ToString() == selectedId);
    //     if (SelectedBudget != null)
    //     {
    //         await LoadChapitresByBudget(SelectedBudget);
    //     }
    //     else
    //     {
    //         Chapitres.Clear();
    //     }
    // }
    private async Task OnSelectedBudgetChanged(ChangeEventArgs e)
    {
        var selectedId = e.Value?.ToString();
        SelectedBudget = Budgets.FirstOrDefault(b => b.BudgetId.ToString() == selectedId);
        if (SelectedBudget != null)
        {
            await LoadChapitresByBudget(SelectedBudget);
        }
        else
        {
            ChapitresByBudget.Clear();
        }
    }

    private async Task OnSelectedChapitreChanged(ChangeEventArgs e)
    {
        var selectedId = e.Value?.ToString();
        SelectedChapitre = ChapitresByBudget.FirstOrDefault(b => b.ChapitreId.ToString() == selectedId);
        if (SelectedChapitre != null)
        {
            await LoadArticlesByChapitre(SelectedChapitre);
        }
        else
        {
            ArticlesByChapitre.Clear();
        }
    }
    private async Task LoadArticlesByChapitre(ChapitreDTO chapitre)
    {
        string url = $"https://localhost:7076/api/Article/by-chapitre/{chapitre.ChapitreId}";
        ArticlesByChapitre = await Http.GetFromJsonAsync<List<ArticleDTO>>(url);
    }

    private async Task LoadChapitresByBudget(BudgetDTO budget)
    {
        string url = $"https://localhost:7076/api/Chapitre/by-budget/{budget.BudgetId}";
        ChapitresByBudget = await Http.GetFromJsonAsync<List<ChapitreDTO>>(url);
    }
    private async Task ShowAddModal()
    {
        IsEditing = false;
        CurrentArticle = new ArticleDTO { ChapitreId = SelectedChapitre?.ChapitreId ?? 0 };
        await ShowModal();
    }

    private async Task ShowEditModal(ArticleDTO article)
    {
        IsEditing = true;
        CurrentArticle = new ArticleDTO
            {
                ArticleId = article.ChapitreId,
                CodeArt = article.CodeArt,
                Article1 = article.Article1,
                ChapitreId = article.ChapitreId
            };
        await ShowModal();
    }

    private async Task ShowModal()
    {
        await JSRuntime.InvokeVoidAsync("modalFunctions.showModal", "modal", "overlay");
    }

    private async Task CloseModal()
    {
        await JSRuntime.InvokeVoidAsync("modalFunctions.closeModal", "modal", "overlay");
    }
    /*
    private async Task SaveChapitre()
    {
    // Validate ChapitreDTO fields(CodeChap, Chapitre1, BudgetId) are populated and valid.
    //     Ensure BudgetDescription is excluded from the payload during creation.
        //     Test API behavior using Postman with a minimal valid payload.
        //     Log and inspect the payload and ModelState errors in the Create endpoint.
            //     Confirm that ChapitreMappingProfile correctly maps ChapitreDTO to Chapitre.

        HttpResponseMessage? response;

            if (IsEditing)
            {
        var index = Chapitres.FindIndex(c => c.ChapitreId == CurrentChapitre.ChapitreId);
            if (index >= 0)
            {

            response = await Http.PutAsJsonAsync($"https://localhost:7076/api/chapitre/update/{CurrentChapitre?.ChapitreId}", CurrentChapitre);
                if (response.IsSuccessStatusCode)
                {
                Chapitres[index] = CurrentChapitre;
                //NewBudget = new BudgetDTO(); // Reset form
                }
                else
        {
        var error = await response.Content.ReadAsStringAsync();
        Console.WriteLine($"API Error: {response.StatusCode} - {error}"); // Handle failure
        }
        }
        }
        else
        {
        //Chapitres.Add(CurrentChapitre);
        response = await Http.PostAsJsonAsync("https://localhost:7076/api/chapitre/create", CurrentChapitre);
            if (response.IsSuccessStatusCode)
            {
            Chapitres.Add(CurrentChapitre);
            CurrentChapitre = new ChapitreDTO(); // Reset form
            }
            else
            {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"API Error: {response.StatusCode} - {error}"); // Handle failure
    }
    }

    await CloseModal();
    }
    */

    private async Task SaveArticle()
    {
        HttpResponseMessage response;

        if (IsEditing)
        {
            // Update existing Chapitre
            response = await Http.PutAsJsonAsync($"https://localhost:7076/api/chapitre/update/{CurrentArticle?.ChapitreId}", CurrentArticle);
        }
        else
        {
            // Create new Chapitre
            response = await Http.PostAsJsonAsync("https://localhost:7076/api/chapitre/create", CurrentArticle);
        }

        if (response.IsSuccessStatusCode)
        {
            var updatedArticle = await response.Content.ReadFromJsonAsync<ArticleDTO>();

            if (updatedArticle != null)
            {
                if (IsEditing)
                {
                    // Replace the existing Chapitre in the list
                    var index = ArticlesByChapitre.FindIndex(c => c.ArticleId == updatedArticle.ArticleId);
                    if (index >= 0)
                    {
                        ArticlesByChapitre[index] = updatedArticle;
                    }
                }
                else
                {
                    // Add the new Chapitre to the list
                    ArticlesByChapitre.Add(updatedArticle);
                }
            }

            await CloseModal();
        }
        else
        {
            // Handle error response
            var errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error: {errorMessage}");
            // Optionally, display the error message to the user
        }
    }




    // private async Task DeleteChapitre(ChapitreDTO chapitre)
    // {
    //     if (await ConfirmDeleteAsync(chapitre))
    //     {
    //         Chapitres.Remove(chapitre);
    //     }
    // }

    // private Task<bool> ConfirmDeleteAsync(ChapitreDTO chapitre)
    // {
    //     return Task.FromResult(true); // Replace with actual confirmation logic
    // }

    //2025-02-03
    private async Task DeleteArticle(ArticleDTO article)
    {
        articleIdToDelete = article.ArticleId;
        var articleToDelete = ArticlesByChapitre.FirstOrDefault(b => b.ArticleId == article.ArticleId);
        if (articleToDelete != null)
        {
            ConfirmDialogRef.Message = $"Are you sure you want to delete Chapitre {articleToDelete.CodeArt} (Chap: {article.Article1})?";
        }
        else
        {
            ConfirmDialogRef.Message = $"Are you sure you want to delete Chapitre with code {article.CodeArt}?";
        }
        await ConfirmDialogRef.Show();
    }

    private ConfirmDialog? ConfirmDialogRef;
    private int articleIdToDelete { get; set; }

    private async Task ConfirmDeleteArticle()
    {
        // Perform the deletion
        if (articleIdToDelete > 0)
        {
            // Actual deletion logic after confirmation
            var response = await Http.DeleteAsync($"https://localhost:7076/api/Chapitre/delete/{articleIdToDelete}");

            if (response.IsSuccessStatusCode)
            {
                // Remove the Chapitre from the list
                var articleToDelete = ArticlesByChapitre.FirstOrDefault(b => b.ArticleId == articleIdToDelete);
                ArticlesByChapitre.Remove(articleToDelete);
                //// await LoadChapitresByBudget(SelectedBudget);
                Console.WriteLine("Chapitre deleted successfully.");
            }
            else
            {
                //Handle error
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {errorMessage}");
                //Console.WriteLine("Failed to delete budget.");
            }
            // Reset the ChapitreToDelete
            articleIdToDelete = 0;
        }
    }

    private void CancelDeleteCArticle()
    {
        articleIdToDelete = 0; // Reset
        Console.WriteLine("Deletion cancelled.");
    }

    // Pagination variables
    private int CurrentPage = 1;
    private int PageSize = 10; // Rows per page
    private List<ArticleDTO> PaginatedArticles = new List<ArticleDTO>(); // Store paginated data separately
                                                                         // Calculate total number of pages
    private int TotalPages => (int)Math.Ceiling((double)ArticlesByChapitre.Count / PageSize);

    // Get rows for the current page
    private  List<ArticleDTO> GetPaginatedData()
    {
        PaginatedArticles =  ArticlesByChapitre
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize) // Ensure we limit the number of items
            .ToList();
        return PaginatedArticles;
    }

    // Navigate to a specific page
    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            CurrentPage = page;
            await Task.FromResult(GetPaginatedData());// Explicitly update displayed data
            StateHasChanged(); // Force a re-render of the component
        }
    }
}
